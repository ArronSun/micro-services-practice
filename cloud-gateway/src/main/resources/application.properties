server.port=7201
spring.application.name=CLOUD-GATEWAY

# 此客户端是否应该从eureka server 获取eureka注册信息
eureka.client.register-with-eureka=true
eureka.instance.instance-id=cloud-gateway

# 和eureka服务器通讯的URL
eureka.client.service-url.defaultZone=http://eurekaUser:eurekaUserPassword@localhost:8001/eureka
# 在地址栏上使用 IP 地址进行显示
eureka.instance.prefer-ip-address=true

# 设置心跳的时间间隔（默认是30秒）
eureka.instance.lease-renewal-interval-in-seconds=15
# eureka server 最后一次收到心跳时等待的时间，超时将会移除client（默认是90秒）
eureka.instance.lease-expiration-duration-in-seconds=90


# 路由配置
spring.cloud.gateway.routes[0].id=my_csdn_route
spring.cloud.gateway.routes[0].uri=http://blog.csdn.net/
spring.cloud.gateway.routes[0].predicates[0]=Path=/qq_39654841/{segment}
#after 路由
#spring.cloud.gateway.routes[1].id=after_route
#spring.cloud.gateway.routes[1].uri=http://blog.csdn.net/qq_39654841/category_9123089.html
#spring.cloud.gateway.routes[1].predicates[0]=After=2021-12-27T23:50:12.191+08:00[Asia/Shanghai]
# before
#spring.cloud.gateway.routes[1].predicates[0]=Before=2021-12-27T23:50:12.191+08:00[Asia/Shanghai]
#Between
#spring.cloud.gateway.routes[1].predicates[0]=Between=2021-12-27T20:50:12.191+08:00[Asia/Shanghai],2021-12-27T23:50:12.191+08:00[Asia/Shanghai]
#Cookie
#spring.cloud.gateway.routes[1].predicates[0]=Cookie=cloud,gateway
#Header
#spring.cloud.gateway.routes[1].predicates[0]=Header=X-Requested-Id,\\d+
#Host
#spring.cloud.gateway.routes[1].predicates[0]=Host=**.sunlong.site
#Method
#spring.cloud.gateway.routes[1].predicates[0]=Method=GET
#Query
#spring.cloud.gateway.routes[1].predicates[0]=Query=cloud,gateway
#RemoteAddr
#spring.cloud.gateway.routes[1].predicates[0]=RemoteAddr=127.0.0.1
# eureka_consumers
spring.cloud.gateway.routes[1].id=eureka_consumers_route
spring.cloud.gateway.routes[1].uri=http://localhost:7001
spring.cloud.gateway.routes[1].predicates[0]=Path=/a/b/consumer/feign/gateway/rewritePath/request
spring.cloud.gateway.routes[1].filters[0]=AddRequestHeader=request-arg,Header
spring.cloud.gateway.routes[1].filters[1]=AddRequestParameter=request-parameter,addRequestParameter
spring.cloud.gateway.routes[1].filters[2]=AddResponseHeader=add-response-header,addResponseHeader
spring.cloud.gateway.routes[1].filters[3]=StripPrefix=2
spring.cloud.gateway.routes[1].filters[4]=RewritePath=/rewritePath/?(?<segment>.*), /$\\{segment}
# Retry 过滤器
#spring.cloud.gateway.routes[1].filters[5].name=Retry
# 重试次数
#spring.cloud.gateway.routes[1].filters[5].args.retries=3
# 重试失败状态
#spring.cloud.gateway.routes[1].filters[5].args.statuses=BAD_GATEWAY
# 允许的请求方法
#spring.cloud.gateway.routes[1].filters[5].args.methods=GET,POST
#spring.cloud.gateway.routes[1].filters[5].args.backoff.firstBackoff=10ms
#spring.cloud.gateway.routes[1].filters[5].args.backoff.maxBackoff=50ms
#spring.cloud.gateway.routes[1].filters[5].args.backoff.factor=2
#spring.cloud.gateway.routes[1].filters[5].args.backoff.basedOnPreviousValue=false

spring.cloud.gateway.routes[1].filters[5]=Retry=3,INTERNAL_SERVER_ERROR,GET,10ms,50ms,2,false
# Hystrix 过滤器
spring.cloud.gateway.routes[1].filters[6].name=Hystrix
# HystrixCommand 名字
spring.cloud.gateway.routes[1].filters[6].args.name=fallbackcmd
spring.cloud.gateway.routes[1].filters[6].args.fallbackUri=forward:/eureka_consumer/fallback
#fackball 时间
hystrix.command.fallbackcmd.execution.isolation.thread.timeoutInMilliseconds=5000


# 限流过滤器
spring.cloud.gateway.routes[2].id=request_rate_limiter_route
spring.cloud.gateway.routes[2].uri=http://localhost:7001
spring.cloud.gateway.routes[2].predicates[0]=Path=/consumer/feign/gateway/rateLimit
spring.cloud.gateway.routes[2].filters[0].name=RequestRateLimiter
#令牌桶每秒填充平均速率
spring.cloud.gateway.routes[2].filters[0].args.redis-rate-limiter.replenishRate=1
#令牌桶总容量
spring.cloud.gateway.routes[2].filters[0].args.redis-rate-limiter.burstCapacity=10
#用于限流的键的解析器的 Bean 对象的名字。它使用 SpEL 表达式根据#{@beanName}从 Spring 容器中获取 Bean 对象
spring.cloud.gateway.routes[2].filters[0].args.key-resolver=#{@uriKeyResolver}

# redis
spring.redis.host=localhost
spring.redis.port=6379
spring.redis.database=0
spring.redis.jedis.pool.max-active=8


# 日志配置
logging.level.org.springframework.cloud.gateway=debug
logging.level.org.springframework.http.server.reactive=debug
logging.level.org.springframework.web.reactive=debug
logging.level.reactor.netty=debug

# actuator 监控 http://localhost:7201/actuator/gateway/routes
management.endpoints.web.exposure.include=*

# 是否与服务发现组件相结合，通过serviceId 转发到具体的实例
spring.cloud.gateway.discovery.locator.enabled=true
# 注册中心为eureka时，设置为true表示开启用小写的serviceId 进行服务路由的转发
spring.cloud.gateway.discovery.locator.lower-case-service-id=true

